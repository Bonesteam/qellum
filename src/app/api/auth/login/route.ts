import { NextRequest, NextResponse } from "next/server";
import { authController } from "@/backend/controllers/auth.controller";
import { attachAuthCookies, clearAuthCookies } from "@/backend/utils/cookies";

export async function POST(req: NextRequest) {
    try {
        const body = await req.json();
        const ua = req.headers.get("user-agent") || undefined;
        const ip =
            req.headers.get("x-forwarded-for")?.split(",")[0]?.trim() ||
            (req as any).ip ||
            undefined;

        // üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const { user, tokens } = await authController.login(body, ua, ip);

        // ‚úÖ –§–æ—Ä–º—É—î–º–æ JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const res = NextResponse.json({ user }, { status: 200 });

        // üßπ –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ —Ç–æ–∫–µ–Ω–∏ –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫
        clearAuthCookies(res);

        // üç™ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ
        attachAuthCookies(res, tokens.accessToken, tokens.refreshToken, 60 * 60 * 24 * 30);

        return res;
    } catch (e: any) {
        console.error("Login error:", e);
        return NextResponse.json(
            { type: "InvalidCredentials", message: e?.message || "Login error" },
            { status: 400 }
        );
    }
}
